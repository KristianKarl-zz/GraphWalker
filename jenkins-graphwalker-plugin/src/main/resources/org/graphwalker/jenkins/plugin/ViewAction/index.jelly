<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:t="/lib/hudson" xmlns:l="/lib/layout" xmlns:i="jelly:fmt" xmlns:x="jelly:xml">
    <st:header name="Expires" value="0" />
    <st:header name="Cache-Control" value="no-cache,must-revalidate" />
    <st:contentType value="text/html;charset=UTF-8" />
    <j:new var="h" className="hudson.Functions" />
    <j:set var="rootURL" value="${request.contextPath}" />
    <j:set var="resURL"  value="${rootURL}${h.resourcePath}" />
    <j:set var="imagesURL"  value="${rootURL}${h.resourcePath}/images" />
    <j:set var="instance" value="${it}" />
    <j:set var="descriptor" value="${it.descriptor}" />
    <x:doctype name="html" />
    <html>
        <head>
            ${h.checkPermission(it,permission)}
            <title>${h.appendIfNotNull(title, ' [Jenkins]', 'Jenkins')}</title>
            <link rel="stylesheet" href="${resURL}/css/style.css" type="text/css" />
            <link rel="stylesheet" href="${resURL}/css/color.css" type="text/css" />
            <script src="${resURL}/scripts/prototype.js" type="text/javascript"/>
            <script src="${resURL}/scripts/behavior.js" type="text/javascript"/>
            <st:adjunct assumes="org.kohsuke.stapler.framework.prototype.prototype" includes="org.kohsuke.stapler.bind"/>
            <style type="text/css">
                body {
                    font-family:sans-serif;
                    font-weight:bold;
                    overflow:hidden;
                }

                html, body {
                    padding:0;
                    margin:0;
                }
                #ruler {
                    position:absolute;
                    visibility: hidden;
                    white-space:nowrap;
                    text-align:center;
                }
                span {
                    vertical-align: middle;
                }
                .job {
                    position:absolute;
                    border-radius:20px;
                    -moz-border-radius:20px;
                    text-align:center;
                    color:#FFFFFF;
                    white-space:nowrap;
                }
                .job-expander {
                    height:100%;
                }
                .job-title {
                    vertical-align:middle;
                    text-align:center;
                }
                .job-time {
                    vertical-align:middle;
                    text-align:left;
                }
                .job-result {
                    vertical-align:middle;
                    text-align:right;
                }
                .job-building {
                    background-color:#204a87;
                }
                .job-default {
                    background-color:#ABABAB;
                }
                .job-success {
                    background-color:#4e9a06;
                }
                .job-failure {
                    background-color:#EF2929;
                }
            </style>
            <meta name="ROBOTS" content="INDEX,NOFOLLOW" />
        </head>
        <body>
            <table><tr><td id="ruler"/></tr></table>
            <script type="text/javascript">
                var proxy;
            </script>
            <st:bind var="proxy" value="${it}"/>
            <script type="text/javascript">

                var jobNames = new Hash();
                var buildQueue = [];
                var maxFontSize = 0;
                var rows = 0;
                var columns = 0;
                var margin = 10;

                function updateEverything() {
                    proxy.getJobNames(function(message) {
                        var newJobNames = message.responseObject();
                        jobNames.keys().without(newJobNames).each(function(name) {
                            jobNames.get(name).remove();
                        });
                        newJobNames.without(jobNames.keys()).each(function(name) {
                            var job = new Element("div", {"id":name, "class":"job job-default"});
                            var content = new Element("table", {"style":"width:100%;height:100%;padding:"+margin+"px;"});
                            content.insert(
                                new Element("tr").insert(
                                    new Element("td", {"class":"job-title", "colspan":"2"}).update(name)
                                )
                            );
                            content.insert(
                                new Element("tr").insert(
                                    new Element("td", {"class":"job-expander", "colspan":"2"})
                                )
                            );
                            content.insert(
                                new Element("tr").insert(
                                    new Element("td", {"class":"job-time"})
                                ).insert(
                                    new Element("td", {"class":"job-result"})
                                )
                            );
                            job.insert(content);
                            jobNames.set(name, job);
                            $(document.body).insert(job);
                        });
                        calculateJobSize();
                        updateJobPosition();
                        updateJobStatus();
                    });
                }

                function calculateJobSize() {
                    var longestName = "";
                    jobNames.keys().each(function (name) {
                        if (longestName.length &lt; name.length) {
                            longestName = name;
                        }
                    });
                    $("ruler").update(longestName);
                    maxFontSize = 0;
                    var maxWidth = document.viewport.getWidth()-4*margin;
                    var maxHeight = document.viewport.getHeight()-2*margin;
                    for (var columnCount = 1; columnCount &lt;= jobNames.keys().length; columnCount++) {
                        for (var fontSize = 10; fontSize &lt;= 302; fontSize++) {
                            var rowCount = Math.ceil(jobNames.keys().length/columnCount);
                            $("ruler").setStyle({"fontSize":fontSize+"px"});
                            var dimensions = $("ruler").getDimensions();
                            var totalWidth = (dimensions.width+margin)*columnCount-margin;
                            var totalHeight = (dimensions.height+margin)*rowCount-margin;
                            if (totalWidth &lt;= maxWidth &amp;&amp; totalHeight &lt;= maxHeight) {
                                if (maxFontSize &lt; fontSize) {
                                    maxFontSize = fontSize;
                                    rows = rowCount;
                                    columns = columnCount;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                }

                function updateJobPosition() {
                    var maxWidth = document.viewport.getWidth()-2*margin;
                    var maxHeight = document.viewport.getHeight()-4*margin;
                    var width = Math.round(maxWidth/columns);
                    var height = Math.round(maxHeight/rows);
                    var offsetX = margin;
                    var offsetY = margin;

                    jobNames.keys().each(function(name) {
                        $(name).setStyle({"top": offsetY+"px"
                            , "left": offsetX+"px"
                            , "width": width+"px"
                            , "height": height+"px"});

                        $(name).getElementsBySelector(".job-title")[0].setStyle({"fontSize":maxFontSize+"px"});
                        $(name).getElementsBySelector(".job-time")[0].setStyle({"fontSize":Math.round(maxFontSize*0.4)+"px"});
                        $(name).getElementsBySelector(".job-result")[0].setStyle({"fontSize":Math.round(maxFontSize*0.4)+"px"});

                        offsetY += height+margin;
                        if (maxHeight &lt;= offsetY) {
                            offsetY = margin;
                            offsetX += width+margin;
                        }
                    });
                }

                function updateJobStatus() {
                    proxy.getJobAttributes(jobNames.keys().without(buildQueue), function(message) {
                        var jobs = new Hash(message.responseObject());
                        jobs.keys().each(function(key) {
                            var attributes = new Hash(jobs.get(key));
                            updateElement(key, attributes);
                            if (attributes.get("isBuilding") === "true") {
                                buildQueue.unshift(key);
                            }
                        });
                    });
                }

                function updateBuildStatus() {
                    if (buildQueue.size()) {
                        proxy.getJobAttributes(buildQueue, function(message) {
                            var jobs = new Hash(message.responseObject());
                            jobs.keys().each(function(key) {
                                var attributes = new Hash(jobs.get(key));
                                updateElement(key, attributes);
                                if (attributes.get("isBuilding") === "false") {
                                    buildQueue = buildQueue.without(key);
                                }
                            });
                        });
                    }
                }

                function updateElement(key, attributes) {
                    if (attributes.get("isBuilding") === "true") {
                            $(key).getElementsBySelector(".job-time")[0].update("");
                            $(key).getElementsBySelector(".job-result")[0].update("");
                            $(key).addClassName("job-building");
                            $(key).removeClassName("job-default");
                            $(key).removeClassName("job-success");
                            $(key).removeClassName("job-failure");
                    } else {
                        if (attributes.get("isDisabled") === "true") {
                            $(key).removeClassName("job-building");
                            $(key).addClassName("job-default");
                            $(key).removeClassName("job-success");
                            $(key).removeClassName("job-failure");
                        } else {
                            $(key).getElementsBySelector(".job-time")[0].update(attributes.get("time"));
                            if (attributes.get("success") === "true") {
                                $(key).removeClassName("job-building");
                                $(key).removeClassName("job-default");
                                $(key).addClassName("job-success");
                                $(key).removeClassName("job-failure");
                            }
                            if (attributes.get("failure") === "true") {
                                $(key).removeClassName("job-building");
                                $(key).removeClassName("job-default");
                                $(key).removeClassName("job-success");
                                $(key).addClassName("job-failure");
                            }
                        }
                    }
                }

                Event.observe(document, "dom:loaded", function() {
                    updateEverything();
                });

                Event.observe(window, "resize", function() {
                    calculateJobSize();
                    updateJobPosition();
                });

                var jobStatusExecutor = new PeriodicalExecuter(function(executor) {
                    updateJobStatus();
                }, 10);

                var buildStatusExecutor = new PeriodicalExecuter(function(executor) {
                    updateBuildStatus();
                }, 3);

            </script>
            <script type="text/javascript">
                var crumb = {
                    fieldName: null,
                    value: null,
                    init: function(crumbField, crumbValue) {
                        if (crumbField=="") return;
                        this.fieldName = crumbField;
                        this.value = crumbValue;
                    },
                    wrap: function(headers) {
                        if (this.fieldName!=null) {
                            if (headers instanceof Array)
                                headers.push(this.fieldName, this.value);
                            else
                                headers[this.fieldName]=this.value;
                        }
                        return headers;
                    },
                    appendToForm : function(form) {
                        if(this.fieldName==null) return; // noop
                        var div = document.createElement("div");
                        var input = document.createElement("input");
                        input.type = "hidden";
                        input.name = this.fieldName;
                        input.value = this.value;
                        div.appendChild(input);
                        form.appendChild(div);
                    }
                }
                crumb.init("${h.getCrumbRequestField()}", "${h.getCrumb(request)}");
            </script>
        </body>
    </html>
</j:jelly>
